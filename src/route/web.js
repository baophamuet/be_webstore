import express from 'express';
import homeController from '../controllers/homeController.js';
import multer from 'multer';
import path from "path";
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import cookieParser from 'cookie-parser';
import session from 'express-session';
import { authMiddleware } from './authMiddleware.js';
import { GoogleGenerativeAI } from "@google/generative-ai";
import 'dotenv/config'; // <-- ƒê·∫£m b·∫£o d√≤ng n√†y ·ªü tr√™n c√πng ƒë·ªÉ load bi·∫øn m√¥i tr∆∞·ªùng
import fs from "fs"; 

// T·∫°o __dirname th·ªß c√¥ng v√¨ ƒëang d√πng ES Module
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// L·∫•y th√¥ng tin d·ª± √°n t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
//const YOUR_PROJECT_ID = process.env.GOOGLE_CLOUD_PROJECT_ID;
//const LOCATION = process.env.GOOGLE_CLOUD_LOCATION;

// Kh·ªüi t·∫°o b·∫±ng API Key
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-preview-image-generation",
});

// H√†m t·∫£i ·∫£nh t·ª´ URL v√† chuy·ªÉn sang Base64
async function urlToBase64(url) {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Cannot fetch image: ${url}`);
  const buffer = await res.arrayBuffer();
  return Buffer.from(buffer).toString('base64');
}

let router = express.Router();
let id = 1;

// C·∫•u h√¨nh multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    if (req.path.startsWith('/user')) {
      cb(null, 'uploads/images/avatar');
    } else if (req.path.startsWith('/product')) {
      cb(null, 'uploads/images/products');
    } else if (req.path.startsWith('/combine-image')) {
      // ·∫¢nh ng∆∞·ªùi m·∫´u kh√°ch h√†ng upload ƒë·ªÉ th·ª≠ ƒë·ªì
      cb(null, 'uploads/images/user');
    }
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    if (req.path.startsWith('/user-image')) {
      // ƒê·∫∑t t√™n ri√™ng cho ·∫£nh user upload
      cb(null, 'user-' + uniqueSuffix + ext);
    } else {
      // Avatar / Product v·∫´n gi·ªØ c√°ch c≈©
      cb(null, file.fieldname + '-' + req.body.username + '-' + uniqueSuffix + ext);
    }
  }
});

const upload = multer({ storage: storage });

const initWebRoutes = (app) => {

  // Middleware cho cookie
  app.use(cookieParser());

  // Middleware cho session (n·∫øu b·∫°n kh√¥ng d√πng, c√≥ th·ªÉ b·ªè comment)
  // app.use(session({
  //   secret: process.env.SESSION_SECRET || 'heheboydeptraivocungtan', // N√™n d√πng bi·∫øn m√¥i tr∆∞·ªùng
  //   resave: false,
  //   saveUninitialized: false,
  //   cookie: {
  //     secure: process.env.NODE_ENV === 'production', // true n·∫øu production (HTTPS)
  //     maxAge: 24 * 60 * 60 * 1000, // 24 gi·ªù
  //     httpOnly: true
  //   }
  // }));

  // Cho ph√©p truy c·∫≠p ·∫£nh trong th∆∞ m·ª•c uploads/
  app.use('/uploads', express.static(path.join(__dirname, '..', 'uploads')));

  // c√°c FE cho ph√©p g·ªçi xu·ªëng BE
  const allowedOrigins = [
    'http://localhost:3000', /// development
    'http://localhost:3001', // development
    'http://localhost:3002', // development
    'http://localhost:3003', // development
    'https://baophamuet.site',
    'https://www.baophamuet.site',
    'https://new.baophamuet.site',
    'https://paper.baophamuet.site',
  ];

  // middleware CORS ƒë√∫ng c√°ch
  router.use(function (req, res, next) {
    const origin = req.headers.origin;
    if (allowedOrigins.includes(origin)) {
      res.setHeader('Access-Control-Allow-Origin', origin);
    }
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    if (req.method === 'OPTIONS') {
      return res.sendStatus(200);
    }
    next();
  });

  router.get('/', homeController.getHomePage);
  router.get('/home', (req, res) => {
    res.cookie('last_visit', new Date().toISOString(), {
      maxAge: 900000,
      httpOnly: true
    });
    return res.json({ status: true, message: "ƒê√¢y l√† trang ch·ªß", boss: "bao.phamthe ƒëz 10 ƒëi·ªÉm th√¥i nh√©" });
  });

  // c·∫•u h√¨nh th√™m/l·∫•y/s·ª≠a/ x√≥a user
  router.get('/users', authMiddleware, homeController.allUsers);
  router.get(`/users/:id`, authMiddleware, homeController.getUser);
  router.post(`/user`, upload.single('profile_avt'), homeController.postUser);
  router.post(`/login`, (req, res) => {
    res.cookie('last_visit', new Date().toISOString(), {
      maxAge: 900000,
      httpOnly: true
    });
    homeController.loginUser(req, res);
  });
  router.delete(`/deluser`, authMiddleware, homeController.delUser);
  router.put('/user', authMiddleware, upload.single('profile_avt'), homeController.updateUser);

  // API th√™m s·∫£n ph·∫©m y√™u th√≠ch/th√™m v√†o gi·ªè h√†ng
  router.post('/users/:id/favorite', authMiddleware, homeController.addFavoriteProduct);
  router.post('/users/:id/cart', authMiddleware, homeController.addCartProduct);
  // API View s·∫£n ph·∫©m y√™u th√≠ch/ƒë√£ th√™m v√†o gi·ªè h√†ng
  router.get('/users/:id/favorite', authMiddleware, homeController.viewFavoriteProduct);
  router.get('/users/:id/cart', authMiddleware, homeController.viewCartProduct);
  // API X√≥a s·∫£n ph·∫©m y√™u th√≠ch/th√™m v√†o gi·ªè h√†ng
  router.put('/users/:id/favorite', authMiddleware, homeController.deFavoriteProduct);
  router.put('/users/:id/cart', authMiddleware, homeController.deCartProduct);

  // c·∫•u h√¨nh th√™m/l·∫•y/s·ª≠a/ x√≥a s·∫£n ph·∫©m
  router.get(`/products/:id`, homeController.Product);
  router.get(`/products`, homeController.allProduct);
  router.post(`/product`, authMiddleware, homeController.addProduct);
  router.put(`/products/:id`, authMiddleware, homeController.updateProduct);
  router.delete(`/products/:id`, authMiddleware, homeController.delProduct);

  // c·∫•u h√¨nh l·∫•y s·∫£n ph·∫©m theo user truy·ªÅn v√†o t·ª´ req.body
  router.get('/orders', homeController.getOrder);


// Route combine
router.post("/combine-image", upload.single("modelFile"), async (req, res) => {
  try {
    const { outfitUrl, prompt } = req.body;
    const modelFile = req.file;

    if (!modelFile) {
      return res.status(400).json({ success: false, error: "Ch∆∞a ch·ªçn ·∫£nh ng∆∞·ªùi m·∫´u" });
    }
    if (!outfitUrl) {
      return res.status(400).json({ success: false, error: "Thi·∫øu outfitUrl" });
    }

    // üîπ Link ·∫£nh model sau khi upload
    const modelUrl = `/uploads/images/user/${modelFile.filename}`;
    console.log("·∫¢nh ng∆∞·ªùi m·∫´u ƒë√£ l∆∞u t·∫°i:", modelUrl);

    // üîπ ƒê·ªçc file v·ª´a upload t·ª´ server ƒë·ªÉ convert base64
    const modelBase64 = fs.readFileSync(modelFile.path).toString("base64");
    const outfitBase64 = await urlToBase64(outfitUrl);

    const finalPrompt =
      prompt ||
      "Edit Image 1 by replacing only the clothing area with the clothing from Image 2. Do not change or regenerate the model‚Äôs face, hair, skin, accessories, or background in any way. Strictly preserve the exact face, expression, and identifiable features from Image 1 without alteration. Ensure the clothing fits naturally to the body and posture, maintaining original colors, patterns, textures, and folds from Image 2, and matching lighting and shadows to Image 1";

    // üîπ G·ªçi model AI ƒë·ªÉ gh√©p ·∫£nh
    const result = await model.generateContent({
      contents: [
        {
          role: "user",
          parts: [
            { text: finalPrompt },
            { inlineData: { mimeType: "image/png", data: modelBase64 } },
            { inlineData: { mimeType: "image/png", data: outfitBase64 } },
          ],
        },
      ],
      generationConfig: { responseModalities: ["TEXT", "IMAGE"] },
    });

    const parts = result.response.candidates[0].content.parts;
    const imagePart = parts.find((p) => p.inlineData);

    if (!imagePart) {
      return res.status(500).json({ success: false, error: "Kh√¥ng t√¨m th·∫•y ·∫£nh trong response" });
    }

    // üîπ L∆∞u ·∫£nh k·∫øt qu·∫£
    const imageBase64 = imagePart.inlineData.data;
    const buffer = Buffer.from(imageBase64, "base64");

    const destFolder = "uploads/images/try-on-photo";
    if (!fs.existsSync(destFolder)) fs.mkdirSync(destFolder, { recursive: true });

    const filePath = path.join(destFolder, `combine-${Date.now()}.png`);
    fs.writeFileSync(filePath, buffer);
    console.log("·∫¢nh k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u!!");
    res.json({
      success: true,
      modelUrl, // link ·∫£nh ng∆∞·ªùi m·∫´u ƒë√£ upload
      outfitUrl,
      resultUrl: `/uploads/images/try-on-photo/${path.basename(filePath)}`, // link ·∫£nh k·∫øt qu·∫£
      prompt: finalPrompt,
    });
  } catch (error) {
    console.error("Error combining images:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// req.body
// {
//     "modelUrl": "https://bizweb.dktcdn.net/thumb/1024x1024/100/366/703/products/a03-2.jpg?v=1748323626020",
//     "outfitUrl": "https://pos.nvncdn.com/fa2431-2286/ps/20250415_01PEyV81nC.jpeg?v=1744706452",
//     "prompt": "H√£y gh√©p ng∆∞·ªùi m·∫´u m·∫∑c b·ªô v√°y n√†y, gi·ªØ g∆∞∆°ng m·∫∑t r√µ n√©t."
// }


  return app.use("/", router);
};

export default initWebRoutes;